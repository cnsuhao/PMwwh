Welcome to the PMwwh wiki!
网页屏幕键盘的原理和安全性分析

实验说明


具体实验对象：
     校园一卡通系统充值转账
     网上银行个人网银登录



实验过程


【屏幕键盘的实现思路】，大致思路就是：1.键盘钩子；2.无焦点窗体。

要实现一个屏幕键盘，需要监听所有键盘事件，无论窗体是否被激活。因此需要一个全局的钩子，也就是系统范围的钩子。

什么是钩子（Hook）
   钩子（Hook）是Windows提供的一种消息处理机制平台，是指在程序正常运行中接受信息之前预先启动的函数，用来检查和修改传给该程序的信息，（钩子）实际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，在没有到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控制权。这时钩子函数即可以加工处理（改变）该消息，也可以不作处理而继续传递该消息，还可以强制结束消息的传递。注意：安装钩子函数将会影响系统的性能。监测“系统范围事件”的系统钩子特别明显。因为系统在处理所有的相关事件时都将调用您的钩子函数，这样您的系统将会明显的减慢。所以应谨慎使用，用完后立即卸载。还有，由于您可以预先截获其它进程的消息，所以一旦您的钩子函数出了问题的话必将影响其它的进程。

钩子的作用范围
一共有两种范围（类型）的钩子，局部的和远程的。局部钩子仅钩挂自己进程的事件。远程的钩子还可以将钩挂其它进程发生的事件。远程的钩子又有两种： 基于线程的钩子将捕获其它进程中某一特定线程的事件。简言之，就是可以用来观察其它进程中的某一特定线程将发生的事件。系统范围的钩子将捕捉系统中所有进程将发生的事件消息。
这里列举两个要用到的钩子。

（1）WH_KEYBOARD_LL Hook 
WH_KEYBOARD_LL Hook监视输入到线程消息队列中的键盘消息。 
（2）WH_MOUSE_LL Hook 
WH_MOUSE_LL Hook监视输入到线程消息队列中的鼠标消息


class 把 API 调用封装起来以便调用。
 1// NativeMethods.cs
 2using System;
 3using System.Runtime.InteropServices;
 4using System.Drawing;
 5
 6namespace CnBlogs.Youzai.ScreenKeyboard {
 7    [StructLayout(LayoutKind.Sequential)]
 8    internal struct MOUSEINPUT {
 9        public int dx;
10        public int dy;
11        public int mouseData;
12        public int dwFlags;
13        public int time;
14        public IntPtr dwExtraInfo;
15    }
16
17    [StructLayout(LayoutKind.Sequential)]
18    internal struct KEYBDINPUT {
19        public short wVk;
20        public short wScan;
21        public int dwFlags;
22        public int time;
23        public IntPtr dwExtraInfo;
24    }
25
26    [StructLayout(LayoutKind.Explicit)]
27    internal struct Input {
28        [FieldOffset(0)]
29        public int type;
30        [FieldOffset(4)]
31        public MOUSEINPUT mi;
32        [FieldOffset(4)]
33        public KEYBDINPUT ki;
34        [FieldOffset(4)]
35        public HARDWAREINPUT hi;
36    }
37
38    [StructLayout(LayoutKind.Sequential)]
39    internal struct HARDWAREINPUT {
40        public int uMsg;
41        public short wParamL;
42        public short wParamH;
43    }
44
45    internal class INPUT {
46        public const int MOUSE = 0;
47        public const int KEYBOARD = 1;
48        public const int HARDWARE = 2;
49    }
50
51    internal static class NativeMethods {
52        [DllImport("User32.dll", CharSet = CharSet.Auto, SetLastError = false)]
53        internal static extern IntPtr GetWindowLong(IntPtr hWnd, int nIndex);
54
55        [DllImport("User32.dll", CharSet = CharSet.Auto, SetLastError = false)]
56        internal static extern IntPtr SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);
57
58        [DllImport("User32.dll", EntryPoint = "SendInput", CharSet = CharSet.Auto)]
59        internal static extern UInt32 SendInput(UInt32 nInputs, Input[] pInputs, Int32 cbSize);
60
61        [DllImport("Kernel32.dll", EntryPoint = "GetTickCount", CharSet = CharSet.Auto)]
62        internal static extern int GetTickCount();
63
64        [DllImport("User32.dll", EntryPoint = "GetKeyState", CharSet = CharSet.Auto)]
65        internal static extern short GetKeyState(int nVirtKey);
66
67        [DllImport("User32.dll", EntryPoint = "SendMessage", CharSet = CharSet.Auto)]
68        internal static extern IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
69    }
70}

安装钩子
    使用SetWindowsHookEx函数（API函数），指定一个Hook类型、自己的Hook过程是全局还是局部Hook，同时给出Hook过程的进入点，就可以轻松的安装自己的Hook过程。SetWindowsHookEx总是将你的Hook函数放置在Hook链的顶端。你可以使用CallNextHookEx函数将系统消息传递给Hook链中的下一个函数。
   对于某些类型的Hook，系统将向该类的所有Hook函数发送消息，这时，Hook函数中的CallNextHookEx语句将被忽略。全局（远程钩子）Hook函数可以拦截系统中所有线程的某个特定的消息，为了安装一个全局Hook过程，必须在应用程序外建立一个DLL并将该Hook函数封装到其中，应用程序在安装全局Hook过程时必须先得到该DLL模块的句柄。将Dll名传递给LoadLibrary 函数，就会得到该DLL模块的句柄；得到该句柄 后，使用GetProcAddress函数可以得到Hook过程的地址。最后，使用SetWindowsHookEx将 Hook过程的首址嵌入相应的Hook链中，SetWindowsHookEx传递一个模块句柄，它为 Hook过程的进入点，线程标识符置为0，该Hook过程同系统中的所有线程关联。如果是安装局部Hook此时该Hook函数可以放置在DLL中，也可以放置在应用程序的模块段。在C#中通过平台调用来调用API函数。

 1    public void Start(bool installMouseHook, bool installKeyboardHook) {
 2        if (hMouseHook == IntPtr.Zero && installMouseHook) {
 3            MouseHookProcedure = new HookProc(MouseHookProc);
 4            hMouseHook = SetWindowsHookEx(
 5                WH_MOUSE_LL,
 6                MouseHookProcedure,
 7                Marshal.GetHINSTANCE(
 8                Assembly.GetExecutingAssembly().GetModules()[0]),
 9                0
10           );
11
12            if (hMouseHook == IntPtr.Zero) {
13                int errorCode = Marshal.GetLastWin32Error();
14                Stop(true, false, false);
15
16                throw new Win32Exception(errorCode);
17            }
18        }
19
20        if (hKeyboardHook == IntPtr.Zero && installKeyboardHook) {
21            KeyboardHookProcedure = new HookProc(KeyboardHookProc);
22            //install hook
23            hKeyboardHook = SetWindowsHookEx(
24                WH_KEYBOARD_LL,
25                KeyboardHookProcedure,
26                Marshal.GetHINSTANCE(
27                Assembly.GetExecutingAssembly().GetModules()[0]),
28                0);
29            // If SetWindowsHookEx fails.
30            if (hKeyboardHook == IntPtr.Zero) {
31                // Returns the error code returned by the last 
32                // unmanaged function called using platform invoke 
33                // that has the DllImportAttribute.SetLastError flag set. 
34                int errorCode = Marshal.GetLastWin32Error();
35                //do cleanup
36                Stop(false, true, false);
37                //Initializes and throws a new instance of the 
38                // Win32Exception class with the specified error. 
39                throw new Win32Exception(errorCode);
40            }
41        }
42    }

使用完钩子后，要进行卸载，这个可以写在析构函数中。将这个文件编译成一个dll，即可在应用程序中调用。

 1
 2    public void Stop() {
 3        this.Stop(true, true, true);
 4    }
 5    
 6    public void Stop(bool uninstallMouseHook, bool uninstallKeyboardHook, 
 7        bool throwExceptions) {
 8        // if mouse hook set and must be uninstalled
 9        if (hMouseHook != IntPtr.Zero && uninstallMouseHook) {
10            // uninstall hook
11            bool retMouse = UnhookWindowsHookEx(hMouseHook);
12            // reset invalid handle
13            hMouseHook = IntPtr.Zero;
14            // if failed and exception must be thrown
15            if (retMouse == false && throwExceptions) {
16                // Returns the error code returned by the last unmanaged function 
17                // called using platform invoke that has the DllImportAttribute.
18                // SetLastError flag set. 
19                int errorCode = Marshal.GetLastWin32Error();
20                // Initializes and throws a new instance of the Win32Exception class 
21                // with the specified error. 
22                throw new Win32Exception(errorCode);
23            }
24        }
25
26        // if keyboard hook set and must be uninstalled
27        if (hKeyboardHook != IntPtr.Zero && uninstallKeyboardHook) {
28            // uninstall hook
29            bool retKeyboard = UnhookWindowsHookEx(hKeyboardHook);
30            // reset invalid handle
31            hKeyboardHook = IntPtr.Zero;
32            // if failed and exception must be thrown
33            if (retKeyboard == false && throwExceptions) {
34                // Returns the error code returned by the last unmanaged function 
35                // called using platform invoke that has the DllImportAttribute.
36                // SetLastError flag set. 
37                int errorCode = Marshal.GetLastWin32Error();
38                // Initializes and throws a new instance of the Win32Exception class 
39                // with the specified error. 
40                throw new Win32Exception(errorCode);
41            }
42        }
43    }
44
  
通过SendInput API函数提供虚拟键盘代码的调用即可模拟键盘输入。下面的代码模拟一个 KeyDown 和 KeyUp 过程，把他们连接起来就是一次按键过程。

 1  private void SendKeyDown(short key) {
 2        Input[] input = new Input[1];
 3        input[0].type = INPUT.KEYBOARD;
 4        input[0].ki.wVk = key;
 5        input[0].ki.time = NativeMethods.GetTickCount();
 6
 7        if (NativeMethods.SendInput((uint)input.Length, input, Marshal.SizeOf(input[0])) 
 8            < input.Length) {
 9            throw new Win32Exception(Marshal.GetLastWin32Error());
10        }
11    }
12
13    private void SendKeyUp(short key) {
14        Input[] input = new Input[1];
15        input[0].type = INPUT.KEYBOARD;
16        input[0].ki.wVk = key;
17        input[0].ki.dwFlags = KeyboardConstaint.KEYEVENTF_KEYUP;
18        input[0].ki.time = NativeMethods.GetTickCount();
19
20        if (NativeMethods.SendInput((uint)input.Length, input, Marshal.SizeOf(input[0]))
21            < input.Length) {
22            throw new Win32Exception(Marshal.GetLastWin32Error());
23        }
24    }

   然后自己实现一个 KeyBoardButton 控件用作按钮，用 Visual Studio 或者 SharpDevelop 为屏幕键盘设计 UI，然后在这些 Button 的 Click 事件里面模拟一个按键过程。
 1
 2    private void ButtonOnClick(object sender, EventArgs e) {
 3        KeyboardButton btnKey = sender as KeyboardButton;
 4        if (btnKey == null) {
 5            return;
 6        }
 7
 8        SendKeyCommand(btnKey);
 9    }
10    
11    private void SendKeyCommand(KeyboardButton keyButton) {
12        short key = keyButton.VKCode;
13        if (combinationVKButtonsMap.ContainsKey(key)) {
14            if (keyButton.Checked) {
15                SendKeyUp(key);
16            } else {
17                SendKeyDown(key);
18            }
19        } else {
20            SendKeyDown(key);
21            SendKeyUp(key);
22        }
23    }

其中 combinationVKButtonsMap 是一个 IDictionary<short, IList<KeyboardButton>>, key 存储的是VK_SHIFT, VK_CONTROL 等组合键的键盘码。左右两个按钮对应同一个键盘码，因此需要放在一个 List 里。标准键盘上的每一个键都有虚拟键码( VK_CODE)与之对应。还有一些其他的常量，把它写在一个静态 class 里。
 1    // KeyboardConstaint.cs
 2    internal static class KeyboardConstaint {
 3        internal static readonly short VK_F1 = 0x70;
 4        internal static readonly short VK_F2 = 0x71;
 5        internal static readonly short VK_F3 = 0x72;
 6        internal static readonly short VK_F4 = 0x73;
 7        internal static readonly short VK_F5 = 0x74;
 8        internal static readonly short VK_F6 = 0x75;
 9        internal static readonly short VK_F7 = 0x76;
10        internal static readonly short VK_F8 = 0x77;
11        internal static readonly short VK_F9 = 0x78;
12        internal static readonly short VK_F10 = 0x79;
13        internal static readonly short VK_F11 = 0x7A;
14        internal static readonly short VK_F12 = 0x7B;
15
16        internal static readonly short VK_LEFT = 0x25;
17        internal static readonly short VK_UP = 0x26;
18        internal static readonly short VK_RIGHT = 0x27;
19        internal static readonly short VK_DOWN = 0x28;
20
21        internal static readonly short VK_NONE = 0x00;
22        internal static readonly short VK_ESCAPE = 0x1B;
23        internal static readonly short VK_EXECUTE = 0x2B;
24        internal static readonly short VK_CANCEL = 0x03;
25        internal static readonly short VK_RETURN = 0x0D;
26        internal static readonly short VK_ACCEPT = 0x1E;
27        internal static readonly short VK_BACK = 0x08;
28        internal static readonly short VK_TAB = 0x09;
29        internal static readonly short VK_DELETE = 0x2E;
30        internal static readonly short VK_CAPITAL = 0x14;
31        internal static readonly short VK_NUMLOCK = 0x90;
32        internal static readonly short VK_SPACE = 0x20;
33        internal static readonly short VK_DECIMAL = 0x6E;
34        internal static readonly short VK_SUBTRACT = 0x6D;
35
36        internal static readonly short VK_ADD = 0x6B;
37        internal static readonly short VK_DIVIDE = 0x6F;
38        internal static readonly short VK_MULTIPLY = 0x6A;
39        internal static readonly short VK_INSERT = 0x2D;
40
41        internal static readonly short VK_OEM_1 = 0xBA;  // ';:' for US
42        internal static readonly short VK_OEM_PLUS = 0xBB;  // '+' any country
43
44        internal static readonly short VK_OEM_MINUS = 0xBD;  // '-' any country
45
46        internal static readonly short VK_OEM_2 = 0xBF;  // '/?' for US
47        internal static readonly short VK_OEM_3 = 0xC0;  // '`~' for US
48        internal static readonly short VK_OEM_4 = 0xDB;  //  '[{' for US
49        internal static readonly short VK_OEM_5 = 0xDC;  //  '\|' for US
50        internal static readonly short VK_OEM_6 = 0xDD;  //  ']}' for US
51        internal static readonly short VK_OEM_7 = 0xDE;  //  ''"' for US
52        internal static readonly short VK_OEM_PERIOD = 0xBE;  // '.>' any country
53        internal static readonly short VK_OEM_COMMA = 0xBC;  // ',<' any country
54        internal static readonly short VK_SHIFT = 0x10;
55        internal static readonly short VK_CONTROL = 0x11;
56        internal static readonly short VK_MENU = 0x12;
57        internal static readonly short VK_LWIN = 0x5B;
58        internal static readonly short VK_RWIN = 0x5C;
59        internal static readonly short VK_APPS = 0x5D;
60
61        internal static readonly short VK_LSHIFT = 0xA0;
62        internal static readonly short VK_RSHIFT = 0xA1;
63        internal static readonly short VK_LCONTROL = 0xA2;
64        internal static readonly short VK_RCONTROL = 0xA3;
65        internal static readonly short VK_LMENU = 0xA4;
66        internal static readonly short VK_RMENU = 0xA5;
67
68        internal static readonly short VK_SNAPSHOT = 0x2C;
69        internal static readonly short VK_SCROLL = 0x91;
70        internal static readonly short VK_PAUSE = 0x13;
71        internal static readonly short VK_HOME = 0x24;
72
73        internal static readonly short VK_NEXT = 0x22;
74        internal static readonly short VK_PRIOR = 0x21;
75        internal static readonly short VK_END = 0x23;
76
77        internal static readonly short VK_NUMPAD0 = 0x60;
78        internal static readonly short VK_NUMPAD1 = 0x61;
79        internal static readonly short VK_NUMPAD2 = 0x62;
80        internal static readonly short VK_NUMPAD3 = 0x63;
81        internal static readonly short VK_NUMPAD4 = 0x64;
82        internal static readonly short VK_NUMPAD5 = 0x65;
83        internal static readonly short VK_NUMPAD5NOTHING = 0x0C;
84        internal static readonly short VK_NUMPAD6 = 0x66;
85        internal static readonly short VK_NUMPAD7 = 0x67;
86        internal static readonly short VK_NUMPAD8 = 0x68;
87        internal static readonly short VK_NUMPAD9 = 0x69;
88
89        internal static readonly short KEYEVENTF_EXTENDEDKEY    = 0x0001;
90        internal static readonly short KEYEVENTF_KEYUP          = 0x0002;
91
92        internal static readonly int GWL_EXSTYLE    = -20;
93        internal static readonly int WS_DISABLED    = 0X8000000;
94        internal static readonly int WM_SETFOCUS    = 0X0007;
95    }

屏幕键盘必须是一个不能获得输入焦点的窗体，在这个窗体的构造函数里，可以安装
一个全局鼠标钩子，再通过调用 SetWindowLong API 函数完成。

 1UserActivityHook hook = new UserActivityHook(true, true);
 2hook.MouseActivity += HookOnMouseActivity;
 3
 4private void HookOnMouseActivity(object sener, HookEx.MouseExEventArgs e) {
 5    Point location = e.Location;
 6
 7    if (e.Button == MouseButtons.Left) {
 8        Rectangle captionRect = new Rectangle(this.Location, new Size(this.Width, 
 9            SystemInformation.CaptionHeight));
10        if (captionRect.Contains(location)) {
11            NativeMethods.SetWindowLong(this.Handle, KeyboardConstaint.GWL_EXSTYLE,
12                (int)NativeMethods.GetWindowLong(this.Handle, KeyboardConstaint.GWL_EXSTYLE)
13                 & (~KeyboardConstaint.WS_DISABLED));
14            NativeMethods.SendMessage(this.Handle, KeyboardConstaint.WM_SETFOCUS, IntPtr.Zero, IntPtr.Zero);
15        } else {
16            NativeMethods.SetWindowLong(this.Handle, KeyboardConstaint.GWL_EXSTYLE,
17                (int)NativeMethods.GetWindowLong(this.Handle, KeyboardConstaint.GWL_EXSTYLE) | 
18                 KeyboardConstaint.WS_DISABLED);
19        }
20    }
21}

 鼠标单击标题栏，让屏幕键盘可以接收焦点，并激活，单击其他部分则不激活窗体（如果激活了，其他程序必然取消激活，输入就无法进行了），这样才可以进行输入，并且保证了可以拖动窗体到其他位置。


软键盘安全性。

  物理键盘的内部有一块微处理器，它控制着键盘的全部工作，比如主机加电时键盘的自检、扫描，扫描码的缓冲以及与主机的通讯等等。当一个键被按下时，微处理器便根据其位置，将字符信号转换成二进制码，传给主机和显示器。如果操作人员的输入速度很快或CPU正在进行其它的工作，就先将键入的内容送往内存中的键盘缓冲区，等CPU空闲时再从缓冲区中取出暂存的指令分析并执行。

  而一般键盘记录间谍软件有三个模块组成：主模块，钩子过程模块以及FTP模块。
  按键记录木马是Trojans木马的变种之一。是功能比较单一的特洛伊木马。攻击者会力图使它保持较小的体积，通常是10 KB  到30 KB，以便快速激活而不引起注意。该木马由3个模块组成：主模块，钩子过程和ftp模块。主模块负责安装一个全局钩子过 程。该钩子的任务是把每次按键事件向主模块汇报，由主模块把所有的击键保存到一个文件中。当记录文件达到预定的大小时，主模块命令ftp模块把记录文件上载给一个n甲服务器。三个模块问的通讯是通过Windows消息机制实现的。
  一旦用户的电脑感染了按键记录木马病毒。系统就被种下了“钩子”，黑客通过“钩子”程序监听和记录用户的击键动作，然后通过自身的邮件发送模块把记录下的密码发送到黑客的指定邮箱。 

  比较典型的案例如“密码大盗”。“密码大盗”病毒运行后。在被感染的计算机上释放下列四个文件：用来记录病毒原始目录的文 件mmdat．dat、病毒主程序intrenat．exe、钩子模块ntdll32．dll和记录用户输入数据的文件wdata32．dU。病毒运行后安装钩子模块，子类 
化IE服务器窗口(Iutemet Explorer_Server)，当发现网贞上有“Password”、“密码”、“Submit”等字符时开始记录用户输入信息．并将记录的用户信息发往指定邮箱。

    为对付按键记录木马，密码输入中目前普遍采用的方法就是软键盘输入。软键盘输人可反击基于钩子技术的键盘监视程序。该 技术方便易用．兼容性强，因此受到了广大用户的欢迎。 
   软键盘技术的工作原理是利用一个软件程序模拟实现硬键盘所具备的功能。在软键盘内部有一个编辑控件。用此编辑控件将 针对每次用户击键譬成一个模拟的随机键击串。木马的监视程序将截获用户的击键和伪击键，这样一来木马的键击记录器就无法 提取记录随机产生的相对应按键，使它很难或者不可能检索实际的输入文本。因此只要不直接通过键盘输入，而用软键盘输入，木 马软件就无法获得每个按键的ID，也就起到了动态隐藏密码的效果，随机键击串麻该是一个乱数，也就会有效地阻止键击记录器获 取信息的途径。而用户输入的数据被存储于～个成员变量中。应用程序就可以很容易地通过编辑控件存取该变量的值，从而能够防止木马窃取密码的事情发生。

  软键盘输入技术使得用按键记录技术的木马失去了作用，但“屏幕快照”窃密木马却可以通过屏幕快照的方法来破解软键盘输入技术。“屏幕快照”窃密木马一般会伪装成后缀名为rar的压缩艾件，诱骗用户上当点击运行。“屏幕快照”窃密木马运行后，会将其中部分网页链接改造成可偷偷打开黑客事先设定的恶意网页的“陷阱”链接，然后自行利用各种IE浏览器的MHT漏洞尝试对点击者的计算机进行木马种植．2004年江民反病毒中心截获的“证券大盗”病毒、2008年1月14日围家计算机病毒应急处理中心发布通告的一个以盗取网上银行和“支付宝”账号密码的“网银木马”，都是使用“屏幕快照”窃密技术的木马案例。 
  “证券大盗”木马病毒运行时，会自动查找包括IE、Maxthon、Trraveler、MYIE、TouchNet、Opera、SmartExplore、k—meleon、GreenBrowser在内的多种浏览器，或寻找一些包含著名券商名称的窗口标题．一旦发现用户使用其中任一种浏览器臀录个人网上银行等界面．就开始启动键盘钩子对用户瞀录信息进行记录，包括用户名和密码。同时在后台以复制的方式将屏幕分为黑、白两种图片。其中软键盘界面为黑色图片，是固定不动，其后通过屏幕快照的方式在一段时间内进行连续截屏．记录每一次鼠标点击的位置．将用户的登录界面保存为多张白色图片，一般存放于：“c：、Screenl．bmp”和“C：＼-Screen2．bmp”下。当记录达到指定次数后．木马病毒会将存档中记录的信息和图片通过电子邮件发送到黑客自己的邮箱中。发送成功后，木马病毒还会实施自杀，将自身删除。黑客通过对照图片中鼠标的点击位置．就很有可能破译出用户的登录账号和密码，从而突破软键盘密码保护技术。（何太星 "证券大盗"木马病毒原理及防范[期刊论文]-计算机安全 2005(3)）


   软键盘改进：将原始的“静态”软键盘模型改进成“动态”的软键盘模型，每当用户利用软键盘点击输入一个数据的同时．键盘上所有按键的显示内容自动隐藏，随后出现的软键盘上所有的按键是随机出现的新的顺序，这种变换过程本身完全随机、无规律町寻，这就可以有效防止密码的失窃。
  具体实现选用VB来编写设计软键盘程序。弯用户鼠标指向软键盘上某个键位时，则所有按钮上的内容不显示：当用户击点键位后松开鼠标时，则更换所有按钮上的内容。采用这样的软键盘设计的好处有：一是软键盘的键位随着每次的按键而改变．可有效防止采用黑白片方案的窃密手段：二是软键盘在指向按键的同时隐藏键位的内容，可有效阻止按键截屏的窃密手段。运用动态软键盘设计的不足之处：键位更换应当采用完全点击时软键盘状态随机形式，以增强安全性。但如果每按一个键位后．布局就进行一次完全变换，则可能造成用户的使用不便。（ 顾海艳， 顾刚， 薛斌，软键盘技术研究和改进，2008,4（35））

网上银行可能存在的风险：
（一）网站密码暴力破解暴力破解是在获取到用户账号的情况下，通过软件不断地将破解词典中的字符按照一定的规则排列组合后进行尝试，直至找到正确的登录密码。该方法虽然在理论上可以破解任何密码，但是由于现在的大部分网站已采取密码多次输入错误后禁止登录或者登录需输入验证码等方式，该办法已很少使用。

（二）键盘敲击记录该方法通过向系统植入木马程序，当用户登录网银时，记录用户所有的键盘敲击内容，从而获得用户的账号名、密码等相关信息，造成财产损失。现在很多网站均采用虚拟键盘技术，即在用户输入密码的过程中，只需点击鼠标即可录入密码，从而防范了风险。

（三）屏幕快照该方法与键盘敲击记录相似，只是增加了屏幕录像功能。因此，当用户登录带有虚拟键盘的银行网站时，骇客依然可以通过记录鼠标的点击顺序，获得客户的账户名及密码。

（四）获取系统控制权骇客通过流光、superscan等软件对计算机系统进行扫描，在发现漏洞后，远程进行攻击并获得电脑控制权。在获得电脑控制权后，骇客很容易就可以获取用户的用户名、数字证书等相关信息。

（五）钓鱼网站钓鱼网站是犯罪分子建立的与银行官网十分相似的网站，其一般包含恶意的代码。当用户误登录到此网站时，因警惕性不高而按网站提示将重要的个人信息透露给了犯罪分子，从而造成财产损失。除了上述的风险外，财务人员的人为风险也是需要引起我们关注的，如存在工资发放金额填写错误、转账单位填选有误等情况。同传统的银行业务相比，网上银行业务具有非常好的实时性，即在高校财务人员提交业务申请后，银行系统能够马上对此申请进行处理。虽然其良好的实时性能够提高工作效率，但同时也加大了处理人为误操作的难度，可能会造成一定的经济损失，存在一定的财务风险。



校园一卡通系统上运行的是金融交易数据及其它重要的M IS数据其安全性要求非常高因此对整个系统的安全要有全面的考虑。为使整个系统安全、高效地运行对系统本身的稳定性、安全性及健壮性都提出了很高的要求最大程度地保护持卡人和校内其他授权商户或收款单位的利益。依据校园一卡通系统的功能组成结构特点可以从以下几方面进行系统安全性分析：
 1 操作系统安全性 选择安全性和稳定性高的操作系统作为后台中心数据库的操作支持平台。SCO UN IX7操作系统就是一个比较合适的选择,与W INDOWS操作系统相比较而言,UN IX具有高安全性安全等级达到C2级病毒感染较少操作系统性能相当卓越运行稳定大大减少了维护工作量。
 2 通信网络安全性 校园一卡通系统从某种意义上说是校园网建设的一部分。但是由于它的应用特殊性,实质上它是一个专用网络，也就是一个小型的局域网。它的唯一出口是与银行相连的通信链路，从其他地方是没有办法进入一卡通系统的。推荐一卡通使用独立的网络或者使用VLAN。在与外界网络相连时使用双网卡,将中心数据与外界进行物理隔离,安全封闭,同时通过防火墙对数据访问进行过滤,有效控制非法数据的侵入。与银行通讯方面,采用一卡通前置机与银行前置机单线直联方式,不经过交换机,可以保证数据传输的可靠性和安全性。
 3 数据通信安全性 在系统网络上,由于通信线路的公共化和电脑的易操作性,使得电子金融犯罪可能通过以下三个主要手段而得逞:一是窃取客户储蓄卡上的P IN;二是伪造和篡改财务交易信息;三是窃取(物理和电子)密钥。